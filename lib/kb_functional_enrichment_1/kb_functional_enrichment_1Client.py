# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_functional_enrichment_1(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_fe1(self, params, context=None):
        """
        run_fe1: run functional enrichment one
        :param params: instance of type "FEOneInput" (required params:
           feature_set_ref: FeatureSet object reference workspace_name: the
           name of the workspace it gets saved to optional params:
           propagation: includes is_a relationship to all go terms (default
           is 1) filter_ref_features: filter reference genome features with
           no go terms (default is 0) statistical_significance: parameter for
           statistical significance. Select one from left_tailed,
           right_tailed or two_tailed (default is left_tailed)
           ignore_go_term_not_in_feature_set: ignore Go term analysis if term
           is not associated with FeatureSet (default is 1)) -> structure:
           parameter "feature_set_ref" of type "obj_ref" (An X/Y/Z style
           reference), parameter "workspace_name" of String, parameter
           "propagation" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1)), parameter "filter_ref_features" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "statistical_significance" of String, parameter
           "ignore_go_term_not_in_feature_set" of type "boolean" (A boolean -
           0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "FEOneResult" (result_directory: folder
           path that holds all files generated by run_deseq2_app report_name:
           report name generated by KBaseReport report_ref: report reference
           generated by KBaseReport) -> structure: parameter
           "result_directory" of String, parameter "report_name" of String,
           parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_functional_enrichment_1.run_fe1',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_functional_enrichment_1.status',
                                        [], self._service_ver, context)
